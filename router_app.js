var express = require("express");
var Imagen = require("./models/imagenes");
var Video = require("./models/video");
var router = express.Router();
var imagen_find = require("./middlewares/find_imagen");
var fs = require("fs");
var nodemailer = require("nodemailer");
var User = require("./models/user").User;
var cookiSession = require("cookie-session");
var redis = require("redis");
var client =redis.createClient();
var url = require('url');
var MongoClient = require('mongodb').MongoClient;	
var bodyParser = require("body-parser");
var fsp = require('fs-promise');
// app.com/app


router.get("/", function(req,res,next){	
	Imagen.find({})
		.populate("creator")
		.exec(function(err,imagenes){
			if(err) {console.log(err);	
			}else{
					res.render("home2",{imagenes:imagenes});}
		})
});
router.get("/imagenes/new",function(req,res){
	res.render("imagenes/new")
});
router.get("/imagenes/newp",function(req,res){
	res.render("imagenes/newp")
});

router.get("/imagenes/newpromo",function(req,res){
	res.render("imagenes/newpromo")
});

router.get("/imagenes/perfil",function(req,res){
	res.render("imagenes/perfil")
});
router.all("/imagenes/:id*",imagen_find);
router.use(bodyParser.json({limit: '250mb'}));
router.use(bodyParser.urlencoded({limit: '250mb', extended: true}));

router.get("/imagenes/:id/edit",function(req,res){
	res.render("imagenes/edit");
});


router.route("/imagenes/:id")
	.get(function(req,res){
	res.render("imagenes/show");
})
.put(function(req,res){
	res.locals.imagen.title = req.body.title
	res.locals.imagen.save(function(err){
				if (!err) {
					res.render("imagenes/show");			
				}else{
 				res.render("Imagenes/"+req.params.id+"/edit",{imagenes: imagenes});
		}
	})
})
	.delete(function(req,res){
		//Imagen.findById(req.params.id, function(err,imagen){ 
			//se usa siepre que s tenga que hacer algo antes de borrar el archivo
			//imagen.remove(); 
		//}
		Imagen.findOneAndRemove({_id:req.params.id}, function(err){
			 if (!err) {
				res.redirect("/app/imagenes")
			 }else {
			 	console.log(err);
			 	res.redirect("/app/imagenes"+req.params.id);
			 }
		})
})	
router.route("/imagenes1/")
	.get(function(req,res){
	Imagen.find({creator:res.locals.user._id},function(err,imagenes){
		if (err) {res.redirect("/app");return;}
res.render("imagenes/index1",{imagenes: imagenes});
	})
})
router.route("/imagenes/")
	.get(function(req,res){
	Imagen.find({creator:res.locals.user._id},function(err,imagenes){
		if (err) {res.redirect("/app");return;}
res.render("imagenes/index",{imagenes: imagenes});
	})
})
	.post(function(req,res){
				var dataString = req.body.imgs22;
				// string generated by canvas.toDataURL()
				var img = req.body.imgs22;
				// Grab the extension to resolve any image error
				var ext = img.split(';')[0].match(/jpeg|png|gif/)[0];
				// strip off the data: url prefix to get just the base64-encoded bytes
				var data = img.replace(/^data:image\/\w+;base64,/, "");
				var buf = new Buffer(img,'base64');
				var datas = {
						title: req.body.title,
						uso: req.body.uso,
						creator: res.locals.user._id,
						extension: ext,
						foto: req.body.foto,
						nombre1: req.body.nombre1
					}
				var imagen = new Imagen(datas);
					imagen.save(function(err){
						if (!err) {
						client.publish("images",imagen.toString());
						fs.writeFile("public/imagenes/"+imagen._id+'.'+ext, data, {encoding: 'base64'}, function(err){
						console.log(err)
						})
						res.redirect("/app/imagenes/"+imagen._id); 
					}else{
						res.render(err);
						}
			
		});
	})


/*				var matches = dataString.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
				response = {};
				try{
				if (matches.length !== 3) {
				return new Error('Invalid input string');
				}
				response.type = matches[1];
				response.data = new Buffer(matches[2], 'base64');
				return response;
				}
				catch(e){
				return false
				}
				}
				let imageBuffer = decodeBase64Image(req.body.imgs22);
				fsp.emptyDir('public/imagenes/s.jpg', imageBuffer.data)
				.then(function(data){
				return data;
					})
				res.redirect("/");
*/

					/*var datas = {
						title: req.body.title,
						uso: req.body.uso,
						creator: res.locals.user._id,
						extension: res.locals.user._id,
						foto: req.body.foto,
						nombre1: req.body.nombre1
					}
					var imagen = new Imagen(datas);
					
					imagen.save(function(err){
						if (!err) {
						client.publish("images",imagen.toString());
						let imageBuffer = decodeBase64Image(req.body.imgs22);
						fs.writeFile("public/imagenes/"+imagen._id+'.jpg', imageBuffer.data)
						res.redirect("/app/imagenes/"+imagen._id); 
					}else{
						res.render(err);
						}*/

			//})
		//var extension = req.body.archivo.name.split(".").pop();



router.get("/imagenes/:id/envio", function(req,res){
	User.findOne({user:res.locals.user},(function(err,user){
			res.render("envio")
	}))
});


router.post("/envio2",function(req,res){
//coleccion areglo de coumentos que cumplen la condicion 
//queri
	User.findOne({},(function(err,user){

		console.log(req.body.name +"nombreeXD")
		var data = {
			nombre: req.body.name,
			email: req.body.email,
			ciudad: req.body.ciudad,
			tel: req.body.telefono,
			mensaje: req.body.mensaje,
			email2: req.body.email2
		}
		console.log(data)

		var transporter = nodemailer.createTransport('smtps://antesde.com%40gmail.com:elbarbas01@smtp.gmail.com');
		var mailOptions = {
	    from: '"Antes-de.com üë•" <#{res.locals.user.email}>', // sender address
	    to:req.body.email2, //req.body.correocliente, //, // list of receivers
	    subject: 'Pedido ‚úî', // Subject line
	    text: 'Tiene in pedido nuevo üê¥', // plaintext body
	    html: '<b>Hola tines una nueva solicitud de un cliente Antes-de.com el nombre es </b>'+ res.locals.user.username +"<p>su email es   </p>" + res.locals.user.email +"<p> esta es la informacion que el dejo en el sistema para ti de:  </p>" +"<p> email </p>" + res.locals.user.email+"<p> Nombre </p>"+ req.body.name +"<p> ciudad </p>"+ req.body.ciudad +"<p> numero telefonico </p>" + req.body.telefono + "<p> lo que solicita </p>" + req.body.mensaje,
	};
		transporter.sendMail(mailOptions, function(error, info){
			if(error){
		       return console.log(error);
		    }else{
		    console.log('Message sent:'  );
				}
		});
		res.redirect("/app/enviamosdatos");
		
	}));
});
router.get("/enviamosdatos",function(req,res){
	res.render("enviamosdatos")
});

///video
router.get("/modifie/video",function(req,res){
	res.render("imagenes/video")
});
router.get("/modifie/mapa",function(req,res){
	res.render("imagenes/mapaagregar")
});
router.post("/modifie/video/",function(req,res){
		var extension = req.body.title.split("=").pop();
		var video = new Video({
			extension: extension,
			imgtitulo: req.body.imgtitulo,
			creator: res.locals.user._id})

		console.log(video)
		video.save().then(function(err){
			console.log("Guardamos tus datos "+ video)
			res.redirect("/app/modifie/video/");
			},function(err){	
			console.log(String(err));
			res.redirect("/usco");	
		});
	});
router.post("/modifie/mapa1/",function(req,res){
		var video = new Video({
			mapa: req.body.mapa,
			imgtitulo: req.body.imgtitulo,
			creator: res.locals.user._id})

		video.save().then(function(err){
			console.log("Guardamos tus datos "+ video)
			res.redirect("/app/modifie/mapa/");
			},function(err){	
			console.log(String(err));
			res.redirect("/usco");	
		});
	});
router.get("/modifie/video/editelimiarvid",function(req,res){
		Video.find({creator:res.locals.user._id},function(err,videos){
			res.render("imagenes/editelimiarvid",{videos: videos});}
		)
});
router.get("/modifie/video/editeliminarmapa",function(req,res){
		Video.find({creator:res.locals.user._id},function(err,videos){
			res.render("imagenes/editeliminarmapa",{videos: videos});}
		)
});

router.delete("/modifie/video/edit/:id",function(req,res){
		//Imagen.findById(req.params.id, function(err,imagen){ 
			//se usa siepre que s tenga que hacer algo antes de borrar el archivo
			//imagen.remove(); 
		//}
		Video.findOneAndRemove({_id:req.params.id}, function(err){
			 if (!err) {
				console.log("aca 1")
			 }else {
			 	console.log(err);
			 	res.redirect("/modifie/video/edit"+req.params.id);
			 }
		})
})	
///user


router.get("/delet/delett",function(req,res){
	res.render("imagenes/delett");}		
);
router.get("/delet/elegido",function(req,res){
	res.render("imagenes/edituser3");}		
);
router.get("/delett/editt/:id",function(req,res){
	res.render("imagenes/edituser2");}		
);
router.get("/vip/vip/:id",function(req,res){
	res.render("imagenes/vip");}		
);
router.route("/delet/edit/:id")
	.get(function(req,res){	
	res.render("imagenes/edituser");
})
.put(function(req,res){

	User.findById({_id:req.params.id},function(err,user){
		console.log(user)
		if(err){
	        res.send('Error al intentar modificar el usuario.');
	     }else{
	     	console.log("1")
	     	var helado = req.body.cambio
	     	if (helado == "email") {
	     		console.log("2")
			user.update({email:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "password") {
	     		console.log("2")
			user.update({password:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "username") {
	     		console.log("2")
			user.update({username:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "gremio") {
	     		console.log("2")
			user.update({gremio:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "imgtitulo") {
	     		console.log("2")
			user.update({imgtitulo:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "empre") {
	     		console.log("2")
			user.update({empre:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "slogan") {
	     		console.log("2")
			user.update({slogan:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "face") {
	     		console.log("2")
			user.update({face:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "twi") {
	     		console.log("2")
			user.update({twi:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "you") {
	     		console.log("2")
			user.update({you:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "color") {
	     		console.log("2")
			user.update({color:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "color1") {
	     		console.log("2")
			user.update({color1:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "color2") {
	     		console.log("2")
			user.update({color2:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     } 
	     	if (helado == "ciudad") {
	     		console.log("2")
			user.update({ciudad:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "departamento") {
	     		console.log("2")
			user.update({departamento:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     } 
	     	if (helado == "telefono") {
	     		console.log("2")
			user.update({telefono:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "insta") {
	     		console.log("2")
			user.update({insta:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "vip") {
	     		console.log("2")
			user.update({vip:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     }
	     	if (helado == "elegido") {
	     		console.log("2")
			user.update({elegido:req.body.title},function(err){	
	     	console.log("3")
						if (!err) {
							res.render("usco");
						}else{
					console.log("4")
		 				res.render("imagenes/edituser");
					}
				})
		     } 
		     
		     }
		})

	})

.delete(function(req,res){
   User.remove({_id: req.params.id}, function(error){
      if(error){
         res.send('Error al intentar eliminar el personaje.');
      }else{ 
         res.redirect('/iniciado');
      }
   });
})
/*exports.update = function(req, res){


   Personaje.findById(req.params.id, function(error, documento){
         var personaje = documento;
         personaje.nombre = req.body.nombre;
         personaje.apellido = req.body.apellido;
         personaje.biografia = req.body.biografia;
         personaje.save(function(error,documento){
            if(error){
               res.send('Error al intentar guardar el personaje.');
            }else{ 
               res.redirect('/personajes');
            }
         });
      
   });




};*/


router.route('/deslogear') 
  .get(function(req, res) { 
      delete req.session.user_id; 
      res.redirect('/')  
  })

router.get("/paypal", function(req,res,next){
	User.find(function(err,users){
		Imagen.find({})
			.populate("creator")
			.exec(function(err,imagenes){
				if(err) {console.log(err);
				}else{
					res.render("compras",{imagenes:imagenes, users:users});}
		})
	})

});
router.get("/success", function(req,res,next){
	User.find(function(err,users){
		Imagen.find({})
			.populate("creator")
			.exec(function(err,imagenes){
				if(err) {console.log(err);
				}else{
					res.render("imagenes/success",{imagenes:imagenes, users:users});}
		})
	})

});

router.post("/success",function(req,res){
//coleccion areglo de coumentos que cumplen la condicion 
//queri
	User.findOne({},(function(err,user){
		var datas1 = {
			nombre: req.body.name,
			tel: req.body.telefono,
			mensaje: req.body.mensaje,
			email2: req.body.email2,
			emaiID: req.body.emaiID

		}
		console.log(datas1)

		var transporter = nodemailer.createTransport('smtps://antesde.com%40gmail.com:elbarbas01@smtp.gmail.com');
		var mailOptions = {
	    from: '"Antes-de.com üë•" <#{res.locals.user.email}>', // sender address
	    to:req.body.email2, //req.body.correocliente, //, // list of receivers
	    subject: 'Pedido ‚úî', // Subject line
	    text: 'Tiene in pedido nuevo üê¥', // plaintext body
	    html: '<b>Hola tines una nuevo cliente VIP o pago  su id </b>'+ req.body.emaiID +"<p> Confirmacion de correo </p>"+ req.body.name +"<p> confirmacion de telefono </p>"+req.body.telefono +"<p> lo que solicita </p>" + req.body.mensaje,
	};
	console.log(mailOptions)
		transporter.sendMail(mailOptions, function(error, info){
			if(error){
		       return console.log(error);
		    }else{
		    console.log('Message sent:'  );
				}
		});
		res.redirect("/app/enviamosdatos");
		
	}));
});


router.get("/noproduc", function(req,res,next){
	User.find(function(err,users){
		Imagen.find({})
			.populate("creator")
			.exec(function(err,imagenes){
				if(err) {console.log(err);
				}else{
					res.render("imagenes/noproduc",{imagenes:imagenes, users:users});}
		})
	})

});



//router.route("/envio ")
module.exports = router;

/*
get solicitar y motrar
rout actualizar
delete eliminar 
post crear
taimanin yukikaze
*/
/*
REST
error  cuando se carga una umagen  http://127.0.0.1:8081/app/imagenes/imagenes
*/

//1670438mon